<template>
    <div style="width: 300px; margin: 100px auto">
        <s-form on-submit="handleSubmit" class="login-form">
            <s-formitem>
                <s-input placeholder="email" decorator="{{emailDecorator}}" value="{=email=}">
                    <s-icon type="user" slot="prefix" style="color: rgba(0, 0, 0, .25);" />
                </s-input>
            </s-formitem>
            <s-formitem>
                <s-input placeholder="password" type="password" value="{=password=}"decorator="{{passwordDecorator}}">
                    <s-icon type="lock" slot="prefix" style="color: rgba(0, 0, 0, .25);" />
                </s-input>
            </s-formitem>
            <s-formitem>
                <s-checkbox decorator="{{rememberDecorator}}">Remember me</s-checkbox>
                <a class="login-form-forgot" href="">Forgot password</a>
                <s-button type="primary" htmlType="submit" class="login-form-button">
                    Log in
                </s-button>
                Or <a href="/register">register now!</a>
            </s-formitem>
        </s-form>
    </div>
</template>
<script>
    import {Form,Input,Icon, Button, Checkbox} from 'santd';
    import {router} from 'san-router';
    import {connect} from 'san-store';
    import {Types as userAction} from './action';

    let loginForm = Form.create({name: 'normal_login'})({
        components: {
            's-form': Form,
            's-formitem': Form.FormItem,
            's-input': Input,
            's-icon': Icon,
            's-button': Button,
            's-checkbox': Checkbox
        },
        initData () {
            return {
                emailDecorator: {
                    name: 'email',
                    rules: [{required: true, message: 'The email cannot be empty'}]
                },
                passwordDecorator: {
                    name: 'password',
                    rules: [{required: true, message: 'Please input your Password!'}]
                },
                rememberDecorator: {
                    name: 'remember',
                    valuePropName: 'checked',
                    initialValue: true
                }
            }
        },
        handleSubmit(e) {
            e.preventDefault();
            const form = this.data.get('form');
            form.validateFields((err, values) => {
                if (!err) {
                    let {email, password} = this.data.get();
                    this.actions.login({email, password}).then(data => {
                        if (data.user) {
                            router.locator.redirect('/home');
                        }
                    });
                }
            });
        }
    });

    export default connect.san(
        {},
        {login: userAction.LOGIN}
    )(loginForm)
</script>
<style>
    .login-form-forgot {
        float: right;
    }
    .login-form-button {
        width: 100%;
    }
</style>